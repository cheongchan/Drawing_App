<script type="text/javascript">
  var channel_id = 'main';
  //
  // Initiate socket.io
  var socket = io.connect('http://localhost:8888');
  socket.emit('channel', channel_id);


  // Define all tools globally
  var gradientTool = new paper.Tool();
  var hueChanger = new paper.Tool();
  var tool = new paper.Tool();
  var dottedLine  = new paper.Tool();
  var blackWhite = new paper.Tool();

  //
  // Define global variables
  //
  var currentPaths = [];
  var userId = Math.round($.now()*Math.random());

  $(document).ready(function(){

 $("#logo_type").click(function () {
    $("#nav_hide").slideToggle("slow");
 });

function userCounter(data) {
     $('#connectCounter').text("Drawers: " + data);
 }


   socket.on('changeCount', function(data) {
         userCounter(data);
   });

    var canvas = document.getElementById(channel_id);
    paper.setup(canvas);

    socket.on('import', function(data){
      paper.project.importJSON(data);
    });

    //
    // Define reusable application wide functions
    //
    function extractPoints(event) {
      return [event.point.x, event.point.y];
    }

    //function to find the valid path to add to
    function filterPaths(userId) {
      var results = currentPaths.filter( function(path) {
        return (path.userId == userId && (path.drawing == 0 || path.drawing == 1));
      });
        return results[0];
    }

    function returnProperPathVariable(data) {
      switch (data.tool)
      {
        case 1:
          var path = new paper.Path();
          path.strokeColor = 'black';
          return path;
        case 2:
           var path = new paper.Path();
           path.strokeColor = {
                  hue: Math.random() * 360,
                  saturation: 1,
                  brightness: 1
           };
           path.strokeWidth = 20;
           path.strokeCap = 'round';
           return path;
        case 3:
          var path = new paper.Path();

          var topLeft = [(data.points[0] - (Math.random() * 180)), (data.points[1] - (Math.random() * 180))];
          var bottomRight = [(data.points[0] + (Math.random() * 180)), (data.points[1] + (Math.random() * 180))];


          path.strokeColor = {
              gradient: {
              stops: ['yellow', 'red', 'blue']
              },
          origin: topLeft,
          destination: bottomRight
          };

          path.strokeWidth = 30;
          path.strokeCap = 'round';
          return path;
       case 4:
         var path = new paper.Path();
         path.strokeColor = '#1A1A00';
         path.strokeWidth = 10;
         path.strokeCap = 'round';
         path.dashArray = [10, 24];
         return path;
      case 5:
          var path = new paper.Path();
          path.strokeColor = 'black';
          path.strokeWidth = 40;
          path.strokeCap = 'square';
          return path;
      }
    }

    //function that keeps track of which path it is adding to
    //updates current paths locally
    function drawEvent(data) {
      if (data.drawing == 0) {

        var path = returnProperPathVariable(data);

        paper.view.draw();

        currentPaths.push({
          userId: data.userId,
          drawing: data.drawing,
          path: path,
          pathId: data.pathId
        });
      }
      else if (data.drawing == 1) {

        var userDrawObject = filterPaths(data.userId);
        var path = userDrawObject.path;
        paper.view.draw();

        if (data.tool == 5) {
              var copy = path.clone();
              copy.strokeColor = 'white';
              copy.strokeWidth = 4;
              copy.position.x += 10;
              copy.position.y += 10;
          }

        path.add(new paper.Point(data.points));
        paper.view.draw();

        userDrawObject.drawing = data.drawing;
      }
      else if (data.drawing == 2) {
        var userDrawObject = filterPaths(data.userId);
        var path = userDrawObject.path;
        userDrawObject.drawing = data.drawing;
      }
    }

    function emitPoint(eventName, data) {
       socket.emit(eventName, data);
    }


    //
    // Define local event functions
    //
    tool.onMouseDown = function (event) {

      var uniquePath = Math.round($.now()*Math.random());
      var points = extractPoints(event);
      var drawing = 0;

      var data = {
        channel: channel_id,
        userId: userId,
        drawing: drawing,
        points: points,
        pathId: uniquePath,
        tool: 1
      };

      drawEvent(data);
      emitPoint("onMouseDown", data);

    }

    tool.onMouseDrag = function (event) {
      var points = extractPoints(event);
      var data = { channel: channel_id,drawing: 1, points: points, userId: userId, tool:1};
      drawEvent(data);
      emitPoint("onMouseDrag", data);
    }

    tool.onMouseUp = function(event) {
      var data = { channel: channel_id, drawing: 2, userId: userId, tool:1 };
      drawEvent(data);
      emitPoint("onMouseUp", data);
      //testing export
      var pictureJSON = paper.project.exportJSON();
      var picture = {channel: channel_id, JSON: pictureJSON}
      socket.emit("update", picture);
    }



    // Hue Changing Tool
    hueChanger.onMouseDown = function(event) {

          var uniquePath = Math.round($.now()*Math.random());
          var points = extractPoints(event);
          var drawing = 0;

          var data = {
              channel: channel_id,
              userId: userId,
              drawing: drawing,
              points: points,
              pathId: uniquePath,
              tool: 2
          };

      drawEvent(data);
      emitPoint("onMouseDown", data);

    }

    hueChanger.onMouseDrag = function(event) {
          var points = extractPoints(event);
          var data = { channel: channel_id, drawing: 1, points: points, userId: userId, tool:2};
          drawEvent(data);
          emitPoint("onMouseDrag", data);
    }

    hueChanger.onMouseUp = function(event) {
       var data = { channel: channel_id, drawing: 2, userId: userId, tool:2 };
      drawEvent(data);
      emitPoint("onMouseUp", data);
      //testing export
      var pictureJSON = paper.project.exportJSON();
      var picture = {channel: channel_id, JSON: pictureJSON}
      socket.emit("update", picture);
    }


   // Gradient Tool
    gradientTool.onMouseDown = function(event) {
      var uniquePath = Math.round($.now()*Math.random());
      var points = extractPoints(event);
      var drawing = 0;

      var data = {
          channel: channel_id,
          userId: userId,
          drawing: drawing,
          points: points,
          pathId: uniquePath,
          tool: 3
      };

      drawEvent(data);
      emitPoint("onMouseDown", data);

    }

    gradientTool.onMouseDrag = function(event) {
          var points = extractPoints(event);
          var data = { channel: channel_id, drawing: 1, points: points, userId: userId, tool:3};
          drawEvent(data);
          emitPoint("onMouseDrag", data);
    }

     gradientTool.onMouseUp = function(event) {
       var data = { channel: channel_id, drawing: 2, userId: userId, tool:3 };
      drawEvent(data);
      emitPoint("onMouseUp", data);
      //testing export
      var pictureJSON = paper.project.exportJSON();
      var picture = {channel: channel_id, JSON: pictureJSON}
      socket.emit("update", picture);
    }



    // Dotted Line Tool
     dottedLine.onMouseDown = function(event) {
      var uniquePath = Math.round($.now()*Math.random());
      var points = extractPoints(event);
      var drawing = 0;

      var data = {
          channel: channel_id,
          userId: userId,
          drawing: drawing,
          points: points,
          pathId: uniquePath,
          tool: 4
      };

      drawEvent(data);
      emitPoint("onMouseDown", data);

    }

    dottedLine.onMouseDrag = function(event) {
          var points = extractPoints(event);
          var data = { channel: channel_id, drawing: 1, points: points, userId: userId, tool:3};
          drawEvent(data);
          emitPoint("onMouseDrag", data);
    }

     dottedLine.onMouseUp = function(event) {
       var data = { channel: channel_id, drawing: 2, userId: userId, tool:3 };
      drawEvent(data);
      emitPoint("onMouseUp", data);
      //testing export
      var pictureJSON = paper.project.exportJSON();
      var picture = {channel: channel_id, JSON: pictureJSON}
      socket.emit("update", picture);
     }


    //                 Clone Tool                        //

      blackWhite.onMouseDown = function(event) {
      var uniquePath = Math.round($.now()*Math.random());
      var points = extractPoints(event);
      var drawing = 0;

      var data = {
          channel: channel_id,
          userId: userId,
          drawing: drawing,
          points: points,
          pathId: uniquePath,
          tool: 5
      };

      drawEvent(data);
      emitPoint("onMouseDown", data);

    }

    blackWhite.onMouseDrag = function(event) {
          var points = extractPoints(event);
          var data = { channel: channel_id, drawing: 1, points: points, userId: userId, tool:5};
          drawEvent(data);
          emitPoint("onMouseDrag", data);
    }

     blackWhite.onMouseUp = function(event) {
       var data = { channel: channel_id, drawing: 2, userId: userId, tool:5 };
      drawEvent(data);
      emitPoint("onMouseUp", data);
      //testing export
      var pictureJSON = paper.project.exportJSON();
      var picture = {channel: channel_id, JSON: pictureJSON}
      socket.emit("update", picture);
     }


    //
    // All emiter functions
    //
    socket.on("onMouseDown"+channel_id, function(data){
      drawEvent(data);
    });

    socket.on("onMouseDrag"+channel_id, function(data){
      drawEvent(data);
    });

    socket.on("onMouseUp"+channel_id, function(data){
      drawEvent(data);
    });

    $('#canvas-links').hide();
    $('#canvas-button').click(function() {
      $('#canvas-links').slideToggle('slow');
    });

   $('#tools-links').hide();
   $('#tools').click(function() {
      $('#tools-links').slideToggle('slow');
   });

   $('#new-canvas-form').hide();
   $('#new-canvas').click(function() {
      $('#new-canvas-form').fadeIn('slow');
   });

});

//Conversation add with SVG
//exports to SVG and prepends to page
function SVGadd(){
  var pictureSVG = paper.project.exportSVG();
  //convert svg object to string
  var picture = $('.temp').append(pictureSVG).html();
  $('.temp').empty();
  return picture;
};

//export svg to rails server
function SVGemit(){
  svg = SVGadd();
  //get title from form
  var title = $('#picture-title').children().val();
  //to rails server
  var image_data = {'image' : {'svg': svg, 'draw_id': channel_id+"", 'title': title}};
  $.ajax({
    type: 'POST',
    url: "/images",
    data: image_data
  });
};

function titleSubmit(){
  var value = $('#picture-title').children().val();
  data = {title: value, channel: channel_id};
  socket.emit('title', data);
  $('#temp-title').text(data.title).hide().addClass("red").fadeIn("slow").delay(1000).queue(function(next){
    $(this).removeClass("red");
    next();
  });
};

socket.on("titleSubmit"+channel_id, function(data){
  $('#picture-title').children().val(data);
 $('#temp-title').text(data).hide().addClass("red").fadeIn("slow").delay(1000).queue(function(next){
    $(this).removeClass("red");
    next();
  });

});

function clearForm(){
  $('#newCanvasForm').val('');
};

function resetForm(){
  $('#newCanvasForm').val('Add');
};

function EnterKey(event){
    if (event.keyCode == 13) {
      title = $('#newCanvasForm').val();
      draws_data = {'draw' : {'canvas_name': title}};
      $.ajax({
        type: 'POST',
        url: "/draws",
        data: draws_data
      });
      resetForm();
    }
};

</script>

<nav>
        <div id="logo_type">
              <%= link_to("Drawing IO", root_path) %>
        </div>

        <div id="nav_hide">


          <div id="canvas-button" class="header"><span class="button-span">Canvases</span></div>
            <div id="canvas-links">
              <% @draws.each do |draw| %>
              <div>
                     <%= link_to draw.canvas_name, draw %>
              </div>
            <% end %>
            </div>

              <div id="tools">
                <div class='header'><span class='button-span'>Tools</span></div>
                <div id='tools-links'>
                  <a href="javascript:tool.activate();">Standard</a><br />
                  <a href="javascript:hueChanger.activate();">Hued</a><br />
                  <a href="javascript:gradientTool.activate();">Gradient</a><br />
                  <a href="javascript:dottedLine.activate();">Dotted</a><br />
                  <a href="javascript:blackWhite.activate();">Clone</a><br />
                </div>
              </div>
              <div class="header"><%= link_to "Collection", images_path%>
              <div id="new-canvas" class="header"><span class='button-span'>New Canvas</span></div>
              <div id="new-canvas-form">
                <input id="newCanvasForm" type='text' value="Add" onfocus="clearForm()" onblur="resetForm()" onsubmit="console.log('hello')" onkeypress="EnterKey(event)">
              </div>

         </div>
</nav>


  <canvas id='main' resize="true"></canvas>
  <div id="connectCounter">Drawers: 1</div>
  <div id="temp-title">Title</div>

  <form id="picture-title">
      <input type="text" name="Title" value="Title" onblur='titleSubmit();'>
  </form>

  <button id='submit-picture' onclick="SVGemit()">Publish</button>

  <div class="temp">
</div>
